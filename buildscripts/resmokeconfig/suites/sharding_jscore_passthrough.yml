test_kind: js_test
use_in_multiversion: sharding_jscore_multiversion_passthrough

selector:
  roots:
  - jstests/core/**/*.js
  exclude_files:
  # These tests are run in sharded_jscore_txns.
  - jstests/core/txns/**/*.js
  # The following tests fail because a certain command or functionality is not supported on
  # mongos. This command or functionality is placed in a comment next to the failing test.
  - jstests/core/apitest_db.js  # serverStatus output doesn't have storageEngine.
  - jstests/core/apply_ops*.js  # applyOps, SERVER-1439.
  - jstests/core/capped6.js  # captrunc.
  - jstests/core/capped_convertToCapped1.js  # cloneCollectionAsCapped.
  - jstests/core/capped_empty.js  # emptycapped.
  - jstests/core/capped_update.js # uses godinsert and can't run under replication.
  - jstests/core/check_shard_index.js  # checkShardingIndex.
  - jstests/core/collection_truncate.js  # emptycapped.
  - jstests/core/collmod_without_uuid.js # applyOps, SERVER-1439
  - jstests/core/compact_keeps_indexes.js  # compact.
  - jstests/core/currentop.js  # uses fsync.
  - jstests/core/dbadmin.js  # "local" database.
  - jstests/core/dbhash.js  # dbhash.
  - jstests/core/dbhash2.js  # dbhash.
  - jstests/core/diagdata.js # Command not supported in mongos
  - jstests/core/dropdb_race.js  # syncdelay.
  - jstests/core/fsync.js  # uses fsync.
  - jstests/core/geo_haystack*.js  # geoSearch.
  - jstests/core/geo_s2cursorlimitskip.js  # profiling.
  - jstests/core/geo_update_btree2.js  # notablescan.
  - jstests/core/index_id_options.js  # "local" database.
  - jstests/core/index9.js  # "local" database.
  - jstests/core/queryoptimizera.js  # "local" database.
  - jstests/core/stages*.js  # stageDebug.
  - jstests/core/startup_log.js  # "local" database.
  - jstests/core/top.js  # top.
  # The following tests fail because mongos behaves differently from mongod when testing certain
  # functionality. The differences are in a comment next to the failing test.
  - jstests/core/explain_missing_database.js  # Behavior with no db different on mongos.
  - jstests/core/geo_2d_explain.js  # executionSuccess in different spot in explain().
  - jstests/core/geo_s2explain.js  # inputStage in different spot in explain().
  - jstests/core/geo_s2sparse.js  # keysPerIndex in different spot in validate().
  - jstests/core/operation_latency_histogram.js  # Stats are counted differently on mongos, SERVER-24880.
  - jstests/core/killop_drop_collection.js # Uses fsyncLock.
  # The following tests fail because of divergent dropCollection behavior between standalones and
  # sharded clusters. These tests expect a second drop command to error, whereas in sharded clusters
  # we expect a second drop to return status OK.
  - jstests/core/drop.js
  - jstests/core/explain_upsert.js

  # The tests below use applyOps, SERVER-1439.
  - jstests/core/list_collections1.js
  - jstests/core/list_collections_filter.js
  - jstests/core/rename_stayTemp.js
  - jstests/core/txns/prepare_transaction_fails_on_temp_collections.js

  exclude_with_any_tags:
  - assumes_against_mongod_not_mongos
  # system.profile collection doesn't exist on mongos.
  - requires_profiling

executor:
  archive:
    hooks:
      - CheckReplDBHash
      - ValidateCollections
  config:
    shell_options:
      readMode: commands
  hooks:
  - class: CheckReplDBHash
  - class: ValidateCollections
  - class: CleanEveryN
    n: 20
  fixture:
    class: ShardedClusterFixture
    mongos_options:
      set_parameters:
        enableTestCommands: 1
    mongod_options:
      set_parameters:
        enableTestCommands: 1
    # TODO: SERVER-43892 Make sharding_jscore_op_query_passthrough and sharding_jscore_passthrough start
    # shards as replica sets by default.
    num_rs_nodes_per_shard: null
    enable_sharding:
    - test
