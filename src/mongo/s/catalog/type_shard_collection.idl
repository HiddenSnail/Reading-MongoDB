# Copyright (C) 2019-present MongoDB, Inc.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the Server Side Public License, version 1,
# as published by MongoDB, Inc.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# Server Side Public License for more details.
#
# You should have received a copy of the Server Side Public License
# along with this program. If not, see
# <http://www.mongodb.com/licensing/server-side-public-license>.
#
# As a special exception, the copyright holders give permission to link the
# code of portions of this program with the OpenSSL library under certain
# conditions as described in each individual source file and distribute
# linked combinations including the program with the OpenSSL library. You
# must comply with the Server Side Public License in all respects for
# all of the code used other than as permitted herein. If you modify file(s)
# with this exception, you may extend this exception to your version of the
# file(s), but you are not obligated to do so. If you do not wish to do so,
# delete this exception statement from your version. If you delete this
# exception statement from all source files in the program, then also delete
# it in the license file.
#

# ShardCollectionType type
#
# This type represents the layout and contents of documents contained in the shard server's
# config.collections collection. All manipulation of documents coming from that collection should
# be done with this class.
#
# Expected shard server config.collections collection format:
#   {
#      "_id" : "foo.bar",
#      "uuid" : UUID,                                   // optional in 3.6
#      "epoch" : ObjectId("58b6fd76132358839e409e47"),  // will remove when UUID becomes available
#      "key" : {
#          "_id" : 1
#      },
#      "defaultCollation" : {
#          "locale" : "fr_CA"
#      },
#      "unique" : false,
#      "refreshing" : true,                                 // optional
#      "lastRefreshedCollectionVersion" : Timestamp(1, 0),  // optional
#      "enterCriticalSectionCounter" : 4                    // optional
#   }
#

global:
    cpp_namespace: "mongo"

imports:
    - "mongo/idl/basic_types.idl"
    - "mongo/db/keypattern.idl"
    - "mongo/s/chunk_version.idl"

structs:
    ShardCollectionTypeBase:
        description: "Represents the layout and contents of documents contained in the shard 
                      server's config.collections collection."
        fields:
            _id:
                cpp_name: nss
                type: namespacestring
                description: "The full namespace (with the database prefix)."
                optional: false
            uuid:
                type: uuid
                description: "The UUID of the collection, if known."
                optional: true
            epoch:
                type: objectid
                description: "Uniquely identifies this instance of the collection, in case of 
                              drop/create or shard key refine."
                optional: false
            key:
                cpp_name: keyPattern
                type: KeyPattern
                description: "Sharding key. If collection is dropped, this is no longer required."
                optional: false
            defaultCollation:
                type: object_owned
                default: BSONObj()
                description: "Optional collection default collation. If empty, implies simple 
                              collation."
                optional: false
            unique:
                type: bool
                description: "Uniqueness of the sharding key."
                optional: false
            refreshing:
                type: bool
                description: "Set by primaries and used by shard secondaries to safely refresh chunk 
                              metadata. Indicates whether the chunks collection is current being 
                              updated, which means read results won't provide a complete view of the 
                              chunk metadata."
                optional: true
            lastRefreshedCollectionVersion:
                type: ChunkVersionLegacy
                description: "Set by primaries and used by shard secondaries to safely refresh chunk 
                              metadata. Indicates the collection version of the last complete chunk 
                              metadata refresh, and is used to indicate if a refresh occurred if the 
                              value is different than when the caller last checked -- because 
                              'refreshing' will be false both before and after a refresh occurs."
                optional: true
            enterCriticalSectionCounter:
                type: int
                description: "Currently just an OpObserver signal, thus otherwise ignored."
                optional: true
