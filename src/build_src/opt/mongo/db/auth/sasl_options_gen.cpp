/**
 * WARNING: This is a generated file. Do not modify.
 *
 * Source: buildscripts/idl/idlc.py --include src --base_dir build/opt --target_arch x86_64 --header build/opt/mongo/db/auth/sasl_options_gen.h --output build/opt/mongo/db/auth/sasl_options_gen.cpp src/mongo/db/auth/sasl_options.idl
 */

#include "mongo/platform/basic.h"

#include "mongo/db/auth/sasl_options_gen.h"

#include <bitset>
#include <set>

#include "mongo/bson/bsonobjbuilder.h"
#include "mongo/db/command_generic_argument.h"
#include "mongo/db/commands.h"
#include "mongo/idl/server_parameter.h"
#include "mongo/idl/server_parameter_with_storage.h"
#include "mongo/util/options_parser/option_section.h"
#include "mongo/util/options_parser/startup_option_init.h"
#include "mongo/util/options_parser/startup_options.h"

namespace mongo {

MONGO_SERVER_PARAMETER_REGISTER(idl_6176655f93594b3ee86e7c012ba75f1294a73a58)(InitializerContext*) {
    /**
     * The set of accepted authentication mechanisms
     */
    MONGO_COMPILER_VARIABLE_UNUSED auto* scp_0 = ([]() -> ServerParameter* {
        auto* ret = makeIDLServerParameterWithStorage<ServerParameterType::kStartupOnly>("authenticationMechanisms", saslGlobalParams.authenticationMechanisms);
        ret->setOnUpdate(SASLGlobalParams::onSetAuthenticationMechanism);
        uassertStatusOK(ret->setValue(SASLGlobalParams::kDefaultAuthenticationMechanisms));
        return ret;
    })();

    /**
     * Overrides the automatically detected hostname used in SASL authentication
     */
    MONGO_COMPILER_VARIABLE_UNUSED auto* scp_1 = ([]() -> ServerParameter* {
        auto* ret = makeIDLServerParameterWithStorage<ServerParameterType::kStartupOnly>("saslHostName", saslGlobalParams.hostName);
        ret->setOnUpdate(SASLGlobalParams::onSetHostName);
        return ret;
    })();

    /**
     * Override the default service name used in Kerberos authentication
     */
    MONGO_COMPILER_VARIABLE_UNUSED auto* scp_2 = ([]() -> ServerParameter* {
        auto* ret = makeIDLServerParameterWithStorage<ServerParameterType::kStartupOnly>("saslServiceName", saslGlobalParams.serviceName);
        ret->setOnUpdate(SASLGlobalParams::onSetServiceName);
        return ret;
    })();

    /**
     * The path to a saslauthd Unix domain socket
     */
    MONGO_COMPILER_VARIABLE_UNUSED auto* scp_3 = ([]() -> ServerParameter* {
        auto* ret = makeIDLServerParameterWithStorage<ServerParameterType::kStartupOnly>("saslauthdPath", saslGlobalParams.authdPath);
        ret->setOnUpdate(SASLGlobalParams::onSetAuthdPath);
        return ret;
    })();

    /**
     * The number of times passwords are iteratively hashed for SCRAM-SHA-1
     */
    MONGO_COMPILER_VARIABLE_UNUSED auto* scp_4 = ([]() -> ServerParameter* {
        auto* ret = makeIDLServerParameterWithStorage<ServerParameterType::kStartupAndRuntime>("scramIterationCount", saslGlobalParams.scramSHA1IterationCount);
        ret->setOnUpdate(SASLGlobalParams::onSetScramSHA1IterationCount);
        ret->addBound<idl_server_parameter_detail::GTE>(5000);
        uassertStatusOK(ret->setValue(10000));
        return ret;
    })();

    /**
     * The number of times passwords are iteratively hashed for SCRAM-SHA-256
     */
    MONGO_COMPILER_VARIABLE_UNUSED auto* scp_5 = ([]() -> ServerParameter* {
        auto* ret = makeIDLServerParameterWithStorage<ServerParameterType::kStartupAndRuntime>("scramSHA256IterationCount", saslGlobalParams.scramSHA256IterationCount);
        ret->setOnUpdate(SASLGlobalParams::onSetScramSHA256IterationCount);
        ret->addBound<idl_server_parameter_detail::GTE>(5000);
        uassertStatusOK(ret->setValue(15000));
        return ret;
    })();

    return Status::OK();
}

namespace  {
MONGO_MODULE_STARTUP_OPTIONS_REGISTER(idl_6176655f93594b3ee86e7c012ba75f1294a73a58)(InitializerContext*) {
    auto& options = optionenvironment::startupOptions;
    namespace moe = ::mongo::optionenvironment;

    {
        moe::OptionSection section("SASL Options");

        section
            .addOptionChaining("security.authenticationMechanisms", "", moe::StringVector, "List of supported authentication mechanisms. Default is SCRAM-SHA-1 and MONGODB-X509.", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceYAMLConfig)
        ;

        section
            .addOptionChaining("security.sasl.hostName", "", moe::String, "Fully qualified server domain name", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceYAMLConfig)
        ;

        section
            .addOptionChaining("security.sasl.serviceName", "", moe::String, "Registered name of the service using SASL", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceYAMLConfig)
        ;

        section
            .addOptionChaining("security.sasl.saslauthdSocketPath", "", moe::String, "Path to Unix domain socket file for saslauthd", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceYAMLConfig)
        ;

        auto status = options.addSection(section);
        if (!status.isOK()) {
            return status;
        }
    }

    return Status::OK();
}
}  // namespace 

}  // namespace mongo
