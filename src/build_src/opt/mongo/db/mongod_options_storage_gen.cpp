/**
 * WARNING: This is a generated file. Do not modify.
 *
 * Source: buildscripts/idl/idlc.py --include src --base_dir build/opt --target_arch x86_64 --header build/opt/mongo/db/mongod_options_storage_gen.h --output build/opt/mongo/db/mongod_options_storage_gen.cpp src/mongo/db/mongod_options_storage.idl
 */

#include "mongo/platform/basic.h"

#include "mongo/db/mongod_options_storage_gen.h"

#include <bitset>
#include <set>

#include "mongo/bson/bsonobjbuilder.h"
#include "mongo/db/command_generic_argument.h"
#include "mongo/db/commands.h"
#include "mongo/idl/server_parameter.h"
#include "mongo/idl/server_parameter_with_storage.h"
#include "mongo/util/options_parser/option_section.h"
#include "mongo/util/options_parser/startup_option_init.h"
#include "mongo/util/options_parser/startup_options.h"

namespace mongo {

std::string recoverToOplogTimestamp;
MONGO_SERVER_PARAMETER_REGISTER(idl_afacfa4eb521015149ed84454d91fad8a16dde77)(InitializerContext*) {
    /**
     * When --queryableBackupMode is supplied on startup along with this server parameter, the server will perform replication recovery up to and including the provided timestamp. The parameter should be passed in as a JSON string with the following format: {timestamp: Timestamp(123, 456)}.
     */
    MONGO_COMPILER_VARIABLE_UNUSED auto* scp_0 = ([]() -> ServerParameter* {
        auto* ret = makeIDLServerParameterWithStorage<ServerParameterType::kStartupOnly>("recoverToOplogTimestamp", recoverToOplogTimestamp);
        return ret;
    })();

    return Status::OK();
}

Status addMongodStorageOptions(optionenvironment::OptionSection* options_ptr) {
    auto& options = *options_ptr;
    namespace moe = ::mongo::optionenvironment;

    {
        moe::OptionSection section("Storage options");

        section
            .addOptionChaining("storage.engine", "storageEngine", moe::String, "What storage engine to use - defaults to wiredTiger if no data files present", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("storage.dbPath", "dbpath", moe::String, storageDBPathDescription(), {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("storage.directoryPerDB", "directoryperdb", moe::Switch, "Each database will be stored in a separate directory", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("storage.queryableBackupMode", "queryableBackupMode", moe::Switch, "Enables queryable backup mode which starts the storage engine in read/write mode to allow for replication recovery. After replication recovery the server above the storage engine layer will be in read-only mode.", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .hidden()
        ;

        section
            .addOptionChaining("storage.groupCollections", "groupCollections", moe::Switch, "Group collections - if true the storage engine may group collections within a database into a shared record store", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .hidden()
        ;

        section
            .addOptionChaining("storage.syncPeriodSecs", "syncdelay", moe::Double, "Seconds between disk syncs", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .setDefault(moe::Value(60.0))
            .addConstraint(new moe::BoundaryKeyConstraint<moe::OptionTypeMap<moe::Double>::type>("storage.syncPeriodSecs", boost::none, boost::none, 0.0, ([]{ constexpr auto value = StorageGlobalParams::kMaxSyncdelaySecs; return value; })()))
        ;

        section
            .addOptionChaining("storage.journal.commitIntervalMs", "journalCommitInterval", moe::Int, "how often to group/batch commit (ms)", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .setDefault(moe::Value(100))
            .addConstraint(new moe::BoundaryKeyConstraint<moe::OptionTypeMap<moe::Int>::type>("storage.journal.commitIntervalMs", boost::none, boost::none, 1, ([]{ constexpr auto value = StorageGlobalParams::kMaxJournalCommitIntervalMs; return value; })()))
        ;

        section
            .addOptionChaining("upgrade", "upgrade", moe::Switch, "Upgrade db if needed", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAllLegacy)
        ;

        section
            .addOptionChaining("repair", "repair", moe::Switch, "Run repair on all dbs", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAllLegacy)
        ;

        section
            .addOptionChaining("storage.journal.enabled", "journal", moe::Switch, "Enable journaling", {}, {"dur"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("nojournal", "nojournal", moe::Switch, "Disable journaling (journaling is on by default for 64 bit)", {}, {"nodur"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAllLegacy)
        ;

        section
            .addOptionChaining("storage.oplogMinRetentionHours", "oplogMinRetentionHours", moe::Double, "Minimum number of hours to preserve in the oplog. Default is 0 (turned off). Fractions are allowed (e.g. 1.5 hours)", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .setDefault(moe::Value(0.0))
            .addConstraint(new moe::BoundaryKeyConstraint<moe::OptionTypeMap<moe::Double>::type>("storage.oplogMinRetentionHours", boost::none, boost::none, 0.0, boost::none))
        ;

        auto status = options.addSection(section);
        if (!status.isOK()) {
            return status;
        }
    }

    return Status::OK();
}

}  // namespace mongo
