/**
 * WARNING: This is a generated file. Do not modify.
 *
 * Source: buildscripts/idl/idlc.py --include src --base_dir build/opt --target_arch x86_64 --header build/opt/mongo/db/mongod_options_general_gen.h --output build/opt/mongo/db/mongod_options_general_gen.cpp src/mongo/db/mongod_options_general.idl
 */

#include "mongo/platform/basic.h"

#include "mongo/db/mongod_options_general_gen.h"

#include <bitset>
#include <set>

#include "mongo/bson/bsonobjbuilder.h"
#include "mongo/db/command_generic_argument.h"
#include "mongo/db/commands.h"
#include "mongo/util/options_parser/option_section.h"
#include "mongo/util/options_parser/startup_option_init.h"
#include "mongo/util/options_parser/startup_options.h"

namespace mongo {


Status addMongodGeneralOptions(optionenvironment::OptionSection* options_ptr) {
    auto& options = *options_ptr;
    namespace moe = ::mongo::optionenvironment;

    {
        moe::OptionSection section("General options");

        section
            .addOptionChaining("auth", "auth", moe::Switch, "Run with security", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAllLegacy)
            .incompatibleWith("noauth")
        ;

        section
            .addOptionChaining("security.clusterIpSourceWhitelist", "clusterIpSourceWhitelist", moe::StringVector, "Network CIDR specification of permitted origin for `__system` access", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .composing()
        ;

        section
            .addOptionChaining("security.authorization", "", moe::String, "How the database behaves with respect to authorization of clients. Options are \"disabled\", which means that authorization checks are not performed, and \"enabled\" which means that a client cannot perform actions it is not authorized to do.", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceYAMLConfig)
            .addConstraint(new moe::CallbackKeyConstraint<moe::OptionTypeMap<moe::String>::type>("security.authorization", validateSecurityAuthorizationSetting))
        ;

        section
            .addOptionChaining("security.authSchemaVersion", "", moe::String, "TODO", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceYAMLConfig)
        ;

        section
            .addOptionChaining("security.enableLocalhostAuthBypass", "", moe::String, "TODO", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceYAMLConfig)
        ;

        section
            .addOptionChaining("profile", "profile", moe::Int, "0=off 1=slow, 2=all", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAllLegacy)
        ;

        section
            .addOptionChaining("operationProfiling.mode", "", moe::String, "(off/slowOp/all)", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceYAMLConfig)
            .addConstraint(new moe::CallbackKeyConstraint<moe::OptionTypeMap<moe::String>::type>("operationProfiling.mode", validateOperationProfilingModeSetting))
        ;

        section
            .addOptionChaining("cpu", "cpu", moe::Switch, "Periodically show cpu and iowait utilization", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAllLegacy)
        ;

        section
            .addOptionChaining("sysinfo", "sysinfo", moe::Switch, "Print some diagnostic system information", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAllLegacy)
        ;

        section
            .addOptionChaining("noscripting", "noscripting", moe::Switch, "Disable scripting engine", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAllLegacy)
        ;

        section
            .addOptionChaining("security.javascriptEnabled", "", moe::Bool, "Enable javascript execution", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceYAMLConfig)
        ;

        section
            .addOptionChaining("notablescan", "notablescan", moe::Switch, "Do not allow table scans", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAllLegacy)
        ;

#if defined(__linux__)
        section
            .addOptionChaining("shutdown", "shutdown", moe::Switch, "Kill a running server (for init scripts)", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAllLegacy)
        ;
#endif

        auto status = options.addSection(section);
        if (!status.isOK()) {
            return status;
        }
    }

    return Status::OK();
}

}  // namespace mongo
