/**
 * WARNING: This is a generated file. Do not modify.
 *
 * Source: buildscripts/idl/idlc.py --include src --base_dir build/opt --target_arch x86_64 --header build/opt/mongo/db/mongod_options_replication_gen.h --output build/opt/mongo/db/mongod_options_replication_gen.cpp src/mongo/db/mongod_options_replication.idl
 */

#include "mongo/platform/basic.h"

#include "mongo/db/mongod_options_replication_gen.h"

#include <bitset>
#include <set>

#include "mongo/bson/bsonobjbuilder.h"
#include "mongo/db/command_generic_argument.h"
#include "mongo/db/commands.h"
#include "mongo/util/options_parser/option_section.h"
#include "mongo/util/options_parser/startup_option_init.h"
#include "mongo/util/options_parser/startup_options.h"

namespace mongo {


Status addMongodReplicationOptions(optionenvironment::OptionSection* options_ptr) {
    auto& options = *options_ptr;
    namespace moe = ::mongo::optionenvironment;

    {
        moe::OptionSection section("Replication options");

        section
            .addOptionChaining("replication.oplogSizeMB", "oplogSize", moe::Int, "Size to use (in MB) for replication op log. default is 5% of disk space (i.e. large is good)", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("master", "master", moe::Switch, "Master/slave replication no longer supported", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAllLegacy)
            .hidden()
        ;

        section
            .addOptionChaining("slave", "slave", moe::Switch, "Master/slave replication no longer supported", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAllLegacy)
            .hidden()
        ;

        auto status = options.addSection(section);
        if (!status.isOK()) {
            return status;
        }
    }

    {
        moe::OptionSection section("Replica set options");

        section
            .addOptionChaining("replication.replSet", "replSet", moe::String, "arg is <setname>[/<optionalseedhostlist>]", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAllLegacy)
        ;

        section
            .addOptionChaining("replication.replSetName", "", moe::String, "arg is <setname>", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceYAMLConfig)
            .addConstraint(new moe::CallbackKeyConstraint<moe::OptionTypeMap<moe::String>::type>("replication.replSetName", validateReplicaSetNameSetting))
        ;

        section
            .addOptionChaining("replication.enableMajorityReadConcern", "enableMajorityReadConcern", moe::Bool, "Enables majority readConcern", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .setDefault(moe::Value(true))
            .setImplicit(moe::Value(true))
        ;

        auto status = options.addSection(section);
        if (!status.isOK()) {
            return status;
        }
    }

    return Status::OK();
}

}  // namespace mongo
