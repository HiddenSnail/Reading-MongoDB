/**
 * WARNING: This is a generated file. Do not modify.
 *
 * Source: buildscripts/idl/idlc.py --include src --base_dir build/opt --target_arch x86_64 --header build/opt/mongo/db/server_options_base_gen.h --output build/opt/mongo/db/server_options_base_gen.cpp src/mongo/db/server_options_base.idl
 */

#include "mongo/platform/basic.h"

#include "mongo/db/server_options_base_gen.h"

#include <bitset>
#include <set>

#include "mongo/bson/bsonobjbuilder.h"
#include "mongo/db/command_generic_argument.h"
#include "mongo/db/commands.h"
#include "mongo/util/options_parser/option_section.h"
#include "mongo/util/options_parser/startup_option_init.h"
#include "mongo/util/options_parser/startup_options.h"

namespace mongo {


Status addBaseServerOptionDefinitions(optionenvironment::OptionSection* options_ptr) {
    auto& options = *options_ptr;
    namespace moe = ::mongo::optionenvironment;

    {
        moe::OptionSection section("General options");

        section
            .addOptionChaining("verbose", "verbose,v", moe::String, "Be more verbose (include multiple times for more verbosity e.g. -vvvvv)", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAllLegacy)
            .setImplicit(moe::Value("v"))
        ;

        section
            .addOptionChaining("systemLog.verbosity", "", moe::Int, "Set verbose level", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceYAMLConfig)
        ;

        section
            .addOptionChaining("systemLog.quiet", "quiet", moe::Switch, "Quieter output", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("logpath", "logpath", moe::String, "Log file to send write to instead of stdout - has to be a file, not directory", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAllLegacy)
            .incompatibleWith("syslog")
        ;

        section
            .addOptionChaining("systemLog.path", "", moe::String, "Log file to send write to instead of stdout - has to be a file, not directory", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceYAMLConfig)
            .incompatibleWith("syslog")
        ;

        section
            .addOptionChaining("systemLog.destination", "", moe::String, "Destination of system log output.  (syslog/file)", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceYAMLConfig)
            .hidden()
            .addConstraint(new moe::CallbackKeyConstraint<moe::OptionTypeMap<moe::String>::type>("systemLog.destination", validateSystemLogDestinationSetting))
        ;

#if !defined(_WIN32)
        section
            .addOptionChaining("syslog", "syslog", moe::Switch, "Log to system\'s syslog facility instead of file or stdout", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAllLegacy)
            .incompatibleWith("systemLog.path")
        ;
#endif

#if !defined(_WIN32)
        section
            .addOptionChaining("systemLog.syslogFacility", "syslogFacility", moe::String, "syslog facility used for mongodb syslog message", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;
#endif

        section
            .addOptionChaining("systemLog.logAppend", "logappend", moe::Switch, "Append to logpath instead of over-writing. Hello Mongo !!!", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("systemLog.logRotate", "logRotate", moe::String, "Set the log rotation behavior (rename|reopen)", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("systemLog.timeStampFormat", "timeStampFormat", moe::String, "Desired format for timestamps in log messages. One of iso8601-utc or iso8601-local", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("setParameter", "setParameter", moe::StringMap, "Set a configurable parameter", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .composing()
        ;

        section
            .addOptionChaining("systemLog.traceAllExceptions", "traceExceptions", moe::Switch, "Log stack traces for every exception", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .hidden()
        ;

        auto status = options.addSection(section);
        if (!status.isOK()) {
            return status;
        }
    }

    return Status::OK();
}

}  // namespace mongo
