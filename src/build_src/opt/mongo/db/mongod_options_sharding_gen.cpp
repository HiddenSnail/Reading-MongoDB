/**
 * WARNING: This is a generated file. Do not modify.
 *
 * Source: buildscripts/idl/idlc.py --include src --base_dir build/opt --target_arch x86_64 --header build/opt/mongo/db/mongod_options_sharding_gen.h --output build/opt/mongo/db/mongod_options_sharding_gen.cpp src/mongo/db/mongod_options_sharding.idl
 */

#include "mongo/platform/basic.h"

#include "mongo/db/mongod_options_sharding_gen.h"

#include <bitset>
#include <set>

#include "mongo/bson/bsonobjbuilder.h"
#include "mongo/db/command_generic_argument.h"
#include "mongo/db/commands.h"
#include "mongo/util/options_parser/option_section.h"
#include "mongo/util/options_parser/startup_option_init.h"
#include "mongo/util/options_parser/startup_options.h"

namespace mongo {


Status addMongodShardingOptions(optionenvironment::OptionSection* options_ptr) {
    auto& options = *options_ptr;
    namespace moe = ::mongo::optionenvironment;

    {
        moe::OptionSection section("Sharding options");

        section
            .addOptionChaining("configsvr", "configsvr", moe::Switch, "Declare this is a config db of a cluster; default port 27019; default dir /data/configdb", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAllLegacy)
            .incompatibleWith("shardsvr")
            .incompatibleWith("nojournal")
        ;

        section
            .addOptionChaining("shardsvr", "shardsvr", moe::Switch, "Declare this is a shard db of a cluster; default port 27018", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAllLegacy)
            .incompatibleWith("configsvr")
        ;

        section
            .addOptionChaining("sharding.clusterRole", "", moe::String, "Choose what role this mongod has in a sharded cluster.  Possible values are: \"configsvr\": Start this node as a config server.  Starts on port 27019 by default. \"shardsvr\": Start this node as a shard server.  Starts on port 27018 by default.", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceYAMLConfig)
            .addConstraint(new moe::CallbackKeyConstraint<moe::OptionTypeMap<moe::String>::type>("sharding.clusterRole", validateShardingClusterRoleSetting))
        ;

        section
            .addOptionChaining("sharding._overrideShardIdentity", "", moe::String, "Overrides the shardIdentity document settings stored in the local storage with a MongoDB Extended JSON document in string format.", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceYAMLConfig)
            .requiresOption("storage.queryableBackupMode")
            .incompatibleWith("configsvr")
        ;

        section
            .addOptionChaining("noMoveParanoia", "noMoveParanoia", moe::Switch, "Turn off paranoid saving of data for the moveChunk command; default", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAllLegacy)
            .hidden()
            .incompatibleWith("moveParanoia")
        ;

        section
            .addOptionChaining("moveParanoia", "moveParanoia", moe::Switch, "Turn on paranoid saving of data during the moveChunk command (used for internal system diagnostics)", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAllLegacy)
            .hidden()
            .incompatibleWith("noMoveParanoia")
        ;

        section
            .addOptionChaining("sharding.archiveMovedChunks", "", moe::Bool, "Config file option to turn on paranoid saving of data during the moveChunk command (used for internal system diagnostics)", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceYAMLConfig)
            .hidden()
        ;

        auto status = options.addSection(section);
        if (!status.isOK()) {
            return status;
        }
    }

    return Status::OK();
}

}  // namespace mongo
