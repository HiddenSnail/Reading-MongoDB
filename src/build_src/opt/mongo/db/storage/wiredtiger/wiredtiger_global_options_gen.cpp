/**
 * WARNING: This is a generated file. Do not modify.
 *
 * Source: buildscripts/idl/idlc.py --include src --base_dir build/opt --target_arch x86_64 --header build/opt/mongo/db/storage/wiredtiger/wiredtiger_global_options_gen.h --output build/opt/mongo/db/storage/wiredtiger/wiredtiger_global_options_gen.cpp src/mongo/db/storage/wiredtiger/wiredtiger_global_options.idl
 */

#include "mongo/platform/basic.h"

#include "mongo/db/storage/wiredtiger/wiredtiger_global_options_gen.h"

#include <bitset>
#include <set>

#include "mongo/bson/bsonobjbuilder.h"
#include "mongo/db/command_generic_argument.h"
#include "mongo/db/commands.h"
#include "mongo/util/options_parser/option_section.h"
#include "mongo/util/options_parser/startup_option_init.h"
#include "mongo/util/options_parser/startup_options.h"

namespace mongo {


namespace  {
MONGO_MODULE_STARTUP_OPTIONS_REGISTER(idl_ff0d31d3a91241e3e48b0acf07e7e8553c65eba4)(InitializerContext*) {
    auto& options = optionenvironment::startupOptions;
    namespace moe = ::mongo::optionenvironment;

    {
        moe::OptionSection section("WiredTiger options");

        section
            .addOptionChaining("storage.wiredTiger.engineConfig.cacheSizeGB", "wiredTigerCacheSizeGB", moe::Double, "Maximum amount of memory to allocate for cache; Defaults to 1/2 of physical RAM", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .addConstraint(new moe::BoundaryKeyConstraint<moe::OptionTypeMap<moe::Double>::type>("storage.wiredTiger.engineConfig.cacheSizeGB", boost::none, boost::none, boost::none, 10000))
        ;

        section
            .addOptionChaining("storage.wiredTiger.engineConfig.statisticsLogDelaySecs", "wiredTigerStatisticsLogDelaySecs", moe::Int, "Seconds to wait between each write to a statistics file in the dbpath; 0 means do not log statistics", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .hidden()
            .setDefault(moe::Value(0))
            .addConstraint(new moe::BoundaryKeyConstraint<moe::OptionTypeMap<moe::Int>::type>("storage.wiredTiger.engineConfig.statisticsLogDelaySecs", boost::none, boost::none, 0, 100000))
        ;

        section
            .addOptionChaining("storage.wiredTiger.engineConfig.journalCompressor", "wiredTigerJournalCompressor", moe::String, "Use a compressor for log records [none|snappy|zlib|zstd]", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .setDefault(moe::Value("snappy"))
            .addConstraint(new moe::CallbackKeyConstraint<moe::OptionTypeMap<moe::String>::type>("storage.wiredTiger.engineConfig.journalCompressor", WiredTigerGlobalOptions::validateWiredTigerCompressor))
        ;

        section
            .addOptionChaining("storage.wiredTiger.engineConfig.directoryForIndexes", "wiredTigerDirectoryForIndexes", moe::Switch, "Put indexes and data in different directories", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("storage.wiredTiger.engineConfig.maxCacheOverflowFileSizeGB", "wiredTigerMaxCacheOverflowFileSizeGB", moe::Double, "Maximum amount of disk space to use for cache overflow; Defaults to 0 (unbounded) Deprecated. Has no effect on storage engine operation.", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .hidden()
            .setDefault(moe::Value(0.0))
        ;

        section
            .addOptionChaining("storage.wiredTiger.engineConfig.configString", "wiredTigerEngineConfigString", moe::String, "WiredTiger storage engine custom configuration setting", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .hidden()
        ;

        section
            .addOptionChaining("storage.wiredTiger.collectionConfig.blockCompressor", "wiredTigerCollectionBlockCompressor", moe::String, "Block compression algorithm for collection data [none|snappy|zlib|zstd]", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .setDefault(moe::Value("snappy"))
            .addConstraint(new moe::CallbackKeyConstraint<moe::OptionTypeMap<moe::String>::type>("storage.wiredTiger.collectionConfig.blockCompressor", WiredTigerGlobalOptions::validateWiredTigerCompressor))
        ;

        section
            .addOptionChaining("storage.wiredTiger.collectionConfig.configString", "wiredTigerCollectionConfigString", moe::String, "WiredTiger custom collection configuration settings", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .hidden()
        ;

        section
            .addOptionChaining("storage.wiredTiger.indexConfig.prefixCompression", "wiredTigerIndexPrefixCompression", moe::Bool, "Use prefix compression on row-store leaf pages", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .setDefault(moe::Value(true))
        ;

        section
            .addOptionChaining("storage.wiredTiger.indexConfig.configString", "wiredTigerIndexConfigString", moe::String, "WiredTiger custom index configuration settings", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .hidden()
        ;

        auto status = options.addSection(section);
        if (!status.isOK()) {
            return status;
        }
    }

    return Status::OK();
}
}  // namespace 

namespace  {
MONGO_STARTUP_OPTIONS_STORE(idl_ff0d31d3a91241e3e48b0acf07e7e8553c65eba4)(InitializerContext*) {
    MONGO_COMPILER_VARIABLE_UNUSED const auto& params = optionenvironment::startupOptionsParsed;
    namespace moe = ::mongo::optionenvironment;

    if (params.count("storage.wiredTiger.engineConfig.cacheSizeGB")) {
        wiredTigerGlobalOptions.cacheSizeGB = params["storage.wiredTiger.engineConfig.cacheSizeGB"].as<moe::OptionTypeMap<moe::Double>::type>();
    }

    if (params.count("storage.wiredTiger.engineConfig.statisticsLogDelaySecs")) {
        wiredTigerGlobalOptions.statisticsLogDelaySecs = params["storage.wiredTiger.engineConfig.statisticsLogDelaySecs"].as<moe::OptionTypeMap<moe::Int>::type>();
    }

    if (params.count("storage.wiredTiger.engineConfig.journalCompressor")) {
        wiredTigerGlobalOptions.journalCompressor = params["storage.wiredTiger.engineConfig.journalCompressor"].as<moe::OptionTypeMap<moe::String>::type>();
    }

    if (params.count("storage.wiredTiger.engineConfig.directoryForIndexes")) {
        wiredTigerGlobalOptions.directoryForIndexes = params["storage.wiredTiger.engineConfig.directoryForIndexes"].as<moe::OptionTypeMap<moe::Switch>::type>();
    }

    if (params.count("storage.wiredTiger.engineConfig.maxCacheOverflowFileSizeGB")) {
        wiredTigerGlobalOptions.maxCacheOverflowFileSizeGBDeprecated = params["storage.wiredTiger.engineConfig.maxCacheOverflowFileSizeGB"].as<moe::OptionTypeMap<moe::Double>::type>();
    }

    if (params.count("storage.wiredTiger.engineConfig.configString")) {
        wiredTigerGlobalOptions.engineConfig = params["storage.wiredTiger.engineConfig.configString"].as<moe::OptionTypeMap<moe::String>::type>();
    }

    if (params.count("storage.wiredTiger.collectionConfig.blockCompressor")) {
        wiredTigerGlobalOptions.collectionBlockCompressor = params["storage.wiredTiger.collectionConfig.blockCompressor"].as<moe::OptionTypeMap<moe::String>::type>();
    }

    if (params.count("storage.wiredTiger.collectionConfig.configString")) {
        wiredTigerGlobalOptions.collectionConfig = params["storage.wiredTiger.collectionConfig.configString"].as<moe::OptionTypeMap<moe::String>::type>();
    }

    if (params.count("storage.wiredTiger.indexConfig.prefixCompression")) {
        wiredTigerGlobalOptions.useIndexPrefixCompression = params["storage.wiredTiger.indexConfig.prefixCompression"].as<moe::OptionTypeMap<moe::Bool>::type>();
    }

    if (params.count("storage.wiredTiger.indexConfig.configString")) {
        wiredTigerGlobalOptions.indexConfig = params["storage.wiredTiger.indexConfig.configString"].as<moe::OptionTypeMap<moe::String>::type>();
    }

    return Status::OK();
}
}  // namespace 

}  // namespace mongo
