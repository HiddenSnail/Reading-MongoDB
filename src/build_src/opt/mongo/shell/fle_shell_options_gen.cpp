/**
 * WARNING: This is a generated file. Do not modify.
 *
 * Source: buildscripts/idl/idlc.py --include src --base_dir build/opt --target_arch x86_64 --header build/opt/mongo/shell/fle_shell_options_gen.h --output build/opt/mongo/shell/fle_shell_options_gen.cpp src/mongo/shell/fle_shell_options.idl
 */

#include "mongo/platform/basic.h"

#include "mongo/shell/fle_shell_options_gen.h"

#include <bitset>
#include <set>

#include "mongo/bson/bsonobjbuilder.h"
#include "mongo/db/command_generic_argument.h"
#include "mongo/db/commands.h"
#include "mongo/util/options_parser/option_section.h"
#include "mongo/util/options_parser/startup_option_init.h"
#include "mongo/util/options_parser/startup_options.h"

namespace mongo {


namespace  {
MONGO_MODULE_STARTUP_OPTIONS_REGISTER(idl_251f394b417085d8acaa53c43f996f2691e3eba7)(InitializerContext*) {
    auto& options = optionenvironment::startupOptions;
    namespace moe = ::mongo::optionenvironment;

    {
        moe::OptionSection section("FLE AWS Options");

        section
            .addOptionChaining("awsAccessKeyId", "awsAccessKeyId", moe::String, "AWS Access Key for FLE Amazon KMS", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceCommandLine)
            .requiresOption("awsSecretAccessKey")
            .requiresOption("keyVaultNamespace")
        ;

        section
            .addOptionChaining("awsSecretAccessKey", "awsSecretAccessKey", moe::String, "AWS Secret Key for FLE Amazon KMS", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceCommandLine)
            .redact()
            .requiresOption("awsAccessKeyId")
            .requiresOption("keyVaultNamespace")
        ;

        section
            .addOptionChaining("awsSessionToken", "awsSessionToken", moe::String, "Optional AWS Session Token ID", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceCommandLine)
            .requiresOption("awsAccessKeyId")
            .requiresOption("awsSecretAccessKey")
            .requiresOption("keyVaultNamespace")
        ;

        section
            .addOptionChaining("keyVaultNamespace", "keyVaultNamespace", moe::String, "database.collection to store encrypted FLE parameters", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceCommandLine)
            .requiresOption("awsAccessKeyId")
            .requiresOption("awsSecretAccessKey")
        ;

        section
            .addOptionChaining("kmsURL", "kmsURL", moe::String, "Test parameter to override the URL for KMS", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceCommandLine)
            .requiresOption("awsAccessKeyId")
            .requiresOption("awsSecretAccessKey")
            .requiresOption("keyVaultNamespace")
        ;

        auto status = options.addSection(section);
        if (!status.isOK()) {
            return status;
        }
    }

    return Status::OK();
}
}  // namespace 

namespace  {
MONGO_STARTUP_OPTIONS_STORE(idl_251f394b417085d8acaa53c43f996f2691e3eba7)(InitializerContext*) {
    MONGO_COMPILER_VARIABLE_UNUSED const auto& params = optionenvironment::startupOptionsParsed;
    namespace moe = ::mongo::optionenvironment;

    if (params.count("awsAccessKeyId")) {
        encryptedShellGlobalParams.awsAccessKeyId = params["awsAccessKeyId"].as<moe::OptionTypeMap<moe::String>::type>();
    }

    if (params.count("awsSecretAccessKey")) {
        encryptedShellGlobalParams.awsSecretAccessKey = params["awsSecretAccessKey"].as<moe::OptionTypeMap<moe::String>::type>();
    }

    if (params.count("awsSessionToken")) {
        encryptedShellGlobalParams.awsSessionToken = params["awsSessionToken"].as<moe::OptionTypeMap<moe::String>::type>();
    }

    if (params.count("keyVaultNamespace")) {
        encryptedShellGlobalParams.keyVaultNamespace = params["keyVaultNamespace"].as<moe::OptionTypeMap<moe::String>::type>();
    }

    if (params.count("kmsURL")) {
        encryptedShellGlobalParams.awsKmsURL = params["kmsURL"].as<moe::OptionTypeMap<moe::String>::type>();
    }

    return Status::OK();
}
}  // namespace 

}  // namespace mongo
