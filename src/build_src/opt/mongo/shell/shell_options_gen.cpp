/**
 * WARNING: This is a generated file. Do not modify.
 *
 * Source: buildscripts/idl/idlc.py --include src --base_dir build/opt --target_arch x86_64 --header build/opt/mongo/shell/shell_options_gen.h --output build/opt/mongo/shell/shell_options_gen.cpp src/mongo/shell/shell_options.idl
 */

#include "mongo/platform/basic.h"

#include "mongo/shell/shell_options_gen.h"

#include <bitset>
#include <set>

#include "mongo/bson/bsonobjbuilder.h"
#include "mongo/db/command_generic_argument.h"
#include "mongo/db/commands.h"
#include "mongo/util/options_parser/option_section.h"
#include "mongo/util/options_parser/startup_option_init.h"
#include "mongo/util/options_parser/startup_options.h"

namespace mongo {


namespace  {
MONGO_MODULE_STARTUP_OPTIONS_REGISTER(idl_38ba72f5da3fbd559756fc443acd1d407f7688da)(InitializerContext*) {
    auto& options = optionenvironment::startupOptions;
    namespace moe = ::mongo::optionenvironment;

    options
        .addOptionChaining("ipv6", "ipv6", moe::Switch, "enable IPv6 support (disabled by default)", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
    ;

    options
        .addOptionChaining("host", "host", moe::String, "server to connect to", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
    ;

    options
        .addOptionChaining("port", "port", moe::String, "port to connect to", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
    ;

    options
        .addOptionChaining("help", "help,h", moe::Switch, "show this usage information", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
    ;

    options
        .addOptionChaining("version", "version", moe::Switch, "show version information", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
    ;

    options
        .addOptionChaining("verbose", "verbose", moe::Switch, "increase verbosity", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
    ;

    options
        .addOptionChaining("shell", "shell", moe::Switch, "run the shell after executing files", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
    ;

    options
        .addOptionChaining("nodb", "nodb", moe::Switch, "don\'t connect to mongod on startup - no \'db address\' arg expected", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
    ;

    options
        .addOptionChaining("norc", "norc", moe::Switch, "will not run the \".mongorc.js\" file on start up", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
    ;

    options
        .addOptionChaining("quiet", "quiet", moe::Switch, "be less chatty", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
    ;

    options
        .addOptionChaining("eval", "eval", moe::String, "evaluate javascript", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
    ;

    options
        .addOptionChaining("objcheck", "objcheck", moe::Switch, "inspect client data for validity on receipt", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAllLegacy)
        .hidden()
        .incompatibleWith("noobjcheck")
    ;

    options
        .addOptionChaining("noobjcheck", "noobjcheck", moe::Switch, "do NOT inspect client data for validity on receipt (DEFAULT)", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAllLegacy)
        .hidden()
        .incompatibleWith("objcheck")
    ;

    options
        .addOptionChaining("disableJavaScriptJIT", "disableJavaScriptJIT", moe::Switch, "disable the Javascript Just In Time compiler", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
        .incompatibleWith("enableJavaScriptJIT")
    ;

    options
        .addOptionChaining("enableJavaScriptJIT", "enableJavaScriptJIT", moe::Switch, "enable the Javascript Just In Time compiler", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
        .incompatibleWith("disableJavaScriptJIT")
    ;

    options
        .addOptionChaining("disableJavaScriptProtection", "disableJavaScriptProtection", moe::Switch, "allow automatic JavaScript function marshalling", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
        .incompatibleWith("enableJavaScriptProtection")
    ;

    options
        .addOptionChaining("enableJavaScriptProtection", "enableJavaScriptProtection", moe::Switch, "disable automatic JavaScript function marshalling (defaults to true)", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
        .hidden()
        .incompatibleWith("disableJavaScriptProtection")
    ;

    options
        .addOptionChaining("nokillop", "nokillop", moe::Switch, "nokillop", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
        .hidden()
    ;

    options
        .addOptionChaining("autokillop", "autokillop", moe::Switch, "autokillop", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
        .hidden()
    ;

    options
        .addOptionChaining("useLegacyWriteOps", "useLegacyWriteOps", moe::Switch, "use legacy write ops instead of write commands", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
        .hidden()
    ;

    options
        .addOptionChaining("writeMode", "writeMode", moe::String, "mode to determine how writes are done: commands, compatibility, legacy", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
        .hidden()
    ;

    options
        .addOptionChaining("readMode", "readMode", moe::String, "mode to determine how .find() querues are done: commands, compatibility, legacy", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
        .hidden()
    ;

    options
        .addOptionChaining("retryWrites", "retryWrites", moe::Switch, "automatically retry write operations upon transient network errors", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
    ;

    options
        .addOptionChaining("disableImplicitSessions", "disableImplicitSessions", moe::Switch, "do not automatically create and use implicit sessions", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
    ;

    options
        .addOptionChaining("rpcProtocols", "rpcProtocols", moe::String, " none, opQueryOnly, opMsgOnly, all", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
        .hidden()
    ;

    options
        .addOptionChaining("jsHeapLimitMB", "jsHeapLimitMB", moe::Int, "set the js scope\'s heap size limit", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
    ;

    options
        .addOptionChaining("setShellParameter", "setShellParameter", moe::StringMap, "Set a configurable parameter", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
        .hidden()
        .composing()
    ;

    options
        .addOptionChaining("dbaddress", "dbaddress", moe::String, "dbaddress", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
        .hidden()
        .positional(1, 1)
    ;

    options
        .addOptionChaining("files", "files", moe::StringVector, "files", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
        .hidden()
        .positional(2, -1)
    ;

    options
        .addOptionChaining("idleSessionTimeout", "idleSessionTimeout", moe::Int, "Terminate the Shell session if it\'s been idle for this many seconds", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAll)
        .setDefault(moe::Value(0))
        .addConstraint(new moe::BoundaryKeyConstraint<moe::OptionTypeMap<moe::Int>::type>("idleSessionTimeout", boost::none, boost::none, 0, boost::none))
    ;

    options
        .addOptionChaining("logv2", "logv2", moe::Switch, "logging gets directed to the logv2 backend", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
        .setSources(moe::SourceAllLegacy)
    ;

    {
        moe::OptionSection section("Authentication Options");

        section
            .addOptionChaining("username", "username,u", moe::String, "username for authentication", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("password", "password,p", moe::String, "password for authentication", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .redact()
            .setImplicit(moe::Value(""))
        ;

        section
            .addOptionChaining("authenticationDatabase", "authenticationDatabase", moe::String, "user source (defaults to dbname)", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .setDefault(moe::Value(""))
        ;

        section
            .addOptionChaining("authenticationMechanism", "authenticationMechanism", moe::String, "authentication mechanism", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("gssapiServiceName", "gssapiServiceName", moe::String, "Service name to use when authenticating using GSSAPI/Kerberos", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .setDefault(moe::Value("mongodb"))
        ;

        section
            .addOptionChaining("gssapiHostName", "gssapiHostName", moe::String, "Remote host name to use for purpose of GSSAPI/Kerberos authentication", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        auto status = options.addSection(section);
        if (!status.isOK()) {
            return status;
        }
    }

    return Status::OK();
}
}  // namespace 

namespace  {
MONGO_STARTUP_OPTIONS_STORE(idl_38ba72f5da3fbd559756fc443acd1d407f7688da)(InitializerContext*) {
    MONGO_COMPILER_VARIABLE_UNUSED const auto& params = optionenvironment::startupOptionsParsed;
    namespace moe = ::mongo::optionenvironment;

    if (params.count("shell")) {
        shellGlobalParams.runShell = params["shell"].as<moe::OptionTypeMap<moe::Switch>::type>();
    }

    if (params.count("norc")) {
        shellGlobalParams.norc = params["norc"].as<moe::OptionTypeMap<moe::Switch>::type>();
    }

    if (params.count("eval")) {
        shellGlobalParams.script = params["eval"].as<moe::OptionTypeMap<moe::String>::type>();
    }

    if (params.count("nokillop")) {
        shellGlobalParams.nokillop = params["nokillop"].as<moe::OptionTypeMap<moe::Switch>::type>();
    }

    if (params.count("autokillop")) {
        shellGlobalParams.autoKillOp = params["autokillop"].as<moe::OptionTypeMap<moe::Switch>::type>();
    }

    if (params.count("retryWrites")) {
        shellGlobalParams.shouldRetryWrites = params["retryWrites"].as<moe::OptionTypeMap<moe::Switch>::type>();
    }

    return Status::OK();
}
}  // namespace 

}  // namespace mongo
