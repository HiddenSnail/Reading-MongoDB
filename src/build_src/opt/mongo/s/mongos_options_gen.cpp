/**
 * WARNING: This is a generated file. Do not modify.
 *
 * Source: buildscripts/idl/idlc.py --include src --base_dir build/opt --target_arch x86_64 --header build/opt/mongo/s/mongos_options_gen.h --output build/opt/mongo/s/mongos_options_gen.cpp src/mongo/s/mongos_options.idl
 */

#include "mongo/platform/basic.h"

#include "mongo/s/mongos_options_gen.h"

#include <bitset>
#include <set>

#include "mongo/bson/bsonobjbuilder.h"
#include "mongo/db/command_generic_argument.h"
#include "mongo/db/commands.h"
#include "mongo/util/options_parser/option_section.h"
#include "mongo/util/options_parser/startup_option_init.h"
#include "mongo/util/options_parser/startup_options.h"

namespace mongo {


namespace  {
MONGO_MODULE_STARTUP_OPTIONS_REGISTER(idl_3cfe1120881422c869ec451941724ad35a5a2af3)(InitializerContext*) {
    auto& options = optionenvironment::startupOptions;
    namespace moe = ::mongo::optionenvironment;

    {
        moe::OptionSection section("Sharding options");

        section
            .addOptionChaining("sharding.configDB", "configdb", moe::String, "Connection string for communicating with config servers: <config replset name>/<host1:port>,<host2:port>,[...]", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("replication.localPingThresholdMs", "localThreshold", moe::Int, "ping time (in ms) for a node to be considered local (default 15ms)", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("test", "test", moe::Switch, "just run unit tests", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAllLegacy)
        ;

        section
            .addOptionChaining("noscripting", "noscripting", moe::Switch, "Disable scripting engine", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAllLegacy)
        ;

        section
            .addOptionChaining("security.javascriptEnabled", "", moe::Bool, "Enable javascript execution", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceYAMLConfig)
        ;

        auto status = options.addSection(section);
        if (!status.isOK()) {
            return status;
        }
    }

    return Status::OK();
}
}  // namespace 

namespace  {
MONGO_STARTUP_OPTIONS_STORE(idl_3cfe1120881422c869ec451941724ad35a5a2af3)(InitializerContext*) {
    MONGO_COMPILER_VARIABLE_UNUSED const auto& params = optionenvironment::startupOptionsParsed;
    namespace moe = ::mongo::optionenvironment;

    if (params.count("replication.localPingThresholdMs")) {
        serverGlobalParams.defaultLocalThresholdMillis = params["replication.localPingThresholdMs"].as<moe::OptionTypeMap<moe::Int>::type>();
    }

    return Status::OK();
}
}  // namespace 

}  // namespace mongo
