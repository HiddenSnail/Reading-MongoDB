/**
 * WARNING: This is a generated file. Do not modify.
 *
 * Source: buildscripts/idl/idlc.py --include src --base_dir build/opt --target_arch x86_64 --header build/opt/mongo/util/net/ssl_options_server_gen.h --output build/opt/mongo/util/net/ssl_options_server_gen.cpp src/mongo/util/net/ssl_options_server.idl
 */

#include "mongo/platform/basic.h"

#include "mongo/util/net/ssl_options_server_gen.h"

#include <bitset>
#include <set>

#include "mongo/bson/bsonobjbuilder.h"
#include "mongo/db/command_generic_argument.h"
#include "mongo/db/commands.h"
#include "mongo/util/options_parser/option_section.h"
#include "mongo/util/options_parser/startup_option_init.h"
#include "mongo/util/options_parser/startup_options.h"

namespace mongo {


namespace  {
MONGO_MODULE_STARTUP_OPTIONS_REGISTER(SSLServerOptionsIDL)(InitializerContext*) {
    auto& options = optionenvironment::startupOptions;
    namespace moe = ::mongo::optionenvironment;

    {
        moe::OptionSection section("TLS Options");

        section
            .addOptionChaining("net.tls.tlsOnNormalPorts", "tlsOnNormalPorts", moe::Switch, "Use TLS on configured ports", {"net.ssl.sslOnNormalPorts"}, {"sslOnNormalPorts"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAllLegacy)
            .incompatibleWith("net.tls.mode")
            .incompatibleWith("net.ssl.mode")
        ;

        section
            .addOptionChaining("net.tls.mode", "tlsMode", moe::String, "Set the TLS operation mode (disabled|allowTLS|preferTLS|requireTLS)", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .incompatibleWith("net.ssl.mode")
        ;

        section
            .addOptionChaining("net.ssl.mode", "sslMode", moe::String, "Set the SSL operation mode (disabled|allowSSL|preferSSL|requireSSL)", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .hidden()
            .incompatibleWith("net.tls.mode")
        ;

        section
            .addOptionChaining("net.tls.certificateKeyFile", "tlsCertificateKeyFile", moe::String, "Certificate and key file for TLS", {"net.ssl.PEMKeyFile"}, {"sslPEMKeyFile"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("net.tls.certificateKeyFilePassword", "tlsCertificateKeyFilePassword", moe::String, "Password to unlock key in the TLS certificate key file", {"net.ssl.PEMKeyPassword"}, {"sslPEMKeyPassword"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .redact()
            .setImplicit(moe::Value(""))
        ;

        section
            .addOptionChaining("net.tls.clusterFile", "tlsClusterFile", moe::String, "Key file for internal TLS authentication", {"net.ssl.clusterFile"}, {"sslClusterFile"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("net.tls.clusterPassword", "tlsClusterPassword", moe::String, "Internal authentication key file password", {"net.ssl.clusterPassword"}, {"sslClusterPassword"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .redact()
            .setImplicit(moe::Value(""))
        ;

        section
            .addOptionChaining("net.tls.CAFile", "tlsCAFile", moe::String, "Certificate Authority file for TLS", {"net.ssl.CAFile"}, {"sslCAFile"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("net.tls.clusterCAFile", "tlsClusterCAFile", moe::String, "CA used for verifying remotes during inbound connections", {"net.ssl.clusterCAFile"}, {"sslClusterCAFile"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("net.tls.CRLFile", "tlsCRLFile", moe::String, "Certificate Revocation List file for TLS", {"net.ssl.CRLFile"}, {"sslCRLFile"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("net.tls.tlsCipherConfig", "tlsCipherConfig", moe::String, "OpenSSL cipher configuration string", {"net.ssl.sslCipherConfig"}, {"sslCipherConfig"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .hidden()
        ;

        section
            .addOptionChaining("net.tls.disabledProtocols", "tlsDisabledProtocols", moe::String, "Comma separated list of TLS protocols to disable [TLS1_0,TLS1_1,TLS1_2]", {"net.ssl.disabledProtocols"}, {"sslDisabledProtocols"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("net.tls.allowConnectionsWithoutCertificates", "tlsAllowConnectionsWithoutCertificates", moe::Switch, "Allow client to connect without presenting a certificate", {"net.tls.weakCertificateValidation", "net.ssl.weakCertificateValidation", "net.ssl.allowConnectionsWithoutCertificates"}, {"tlsWeakCertificateValidation", "sslWeakCertificateValidation", "sslAllowConnectionsWithoutCertificates"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("net.tls.allowInvalidHostnames", "tlsAllowInvalidHostnames", moe::Switch, "Allow server certificates to provide non-matching hostnames", {"net.ssl.allowInvalidHostnames"}, {"sslAllowInvalidHostnames"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("net.tls.allowInvalidCertificates", "tlsAllowInvalidCertificates", moe::Switch, "Allow connections to servers with invalid certificates", {"net.ssl.allowInvalidCertificates"}, {"sslAllowInvalidCertificates"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("net.tls.FIPSMode", "tlsFIPSMode", moe::Switch, "Activate FIPS 140-2 mode at startup", {"net.ssl.FIPSMode"}, {"sslFIPSMode"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

#if defined(MONGO_CONFIG_SSL_CERTIFICATE_SELECTORS)
        section
            .addOptionChaining("net.tls.certificateSelector", "tlsCertificateSelector", moe::String, "TLS Certificate in system store", {"net.ssl.certificateSelector"}, {"sslCertificateSelector"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .incompatibleWith("net.tls.certificateKeyFile")
            .incompatibleWith("net.tls.certificateKeyFilePassword")
        ;
#endif

#if defined(MONGO_CONFIG_SSL_CERTIFICATE_SELECTORS)
        section
            .addOptionChaining("net.tls.clusterCertificateSelector", "tlsClusterCertificateSelector", moe::String, "SSL/TLS Certificate in system store for internal TLS authentication", {"net.ssl.clusterCertificateSelector"}, {"sslClusterCertificateSelector"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .incompatibleWith("net.tls.clusterFile")
            .incompatibleWith("net.tls.clusterFilePassword")
        ;
#endif

        section
            .addOptionChaining("net.tls.logVersions", "tlsLogVersions", moe::String, "Comma separated list of TLS protocols to log on connect [TLS1_0,TLS1_1,TLS1_2]", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        auto status = options.addSection(section);
        if (!status.isOK()) {
            return status;
        }
    }

    return Status::OK();
}
}  // namespace 

namespace  {
MONGO_STARTUP_OPTIONS_STORE(SSLServerOptionsIDL)(InitializerContext*) {
    MONGO_COMPILER_VARIABLE_UNUSED const auto& params = optionenvironment::startupOptionsParsed;
    namespace moe = ::mongo::optionenvironment;

    if (params.count("net.tls.certificateKeyFilePassword")) {
        sslGlobalParams.sslPEMKeyPassword = params["net.tls.certificateKeyFilePassword"].as<moe::OptionTypeMap<moe::String>::type>();
    }

    if (params.count("net.tls.clusterPassword")) {
        sslGlobalParams.sslClusterPassword = params["net.tls.clusterPassword"].as<moe::OptionTypeMap<moe::String>::type>();
    }

    if (params.count("net.tls.allowConnectionsWithoutCertificates")) {
        sslGlobalParams.sslWeakCertificateValidation = params["net.tls.allowConnectionsWithoutCertificates"].as<moe::OptionTypeMap<moe::Switch>::type>();
    }

    if (params.count("net.tls.allowInvalidHostnames")) {
        sslGlobalParams.sslAllowInvalidHostnames = params["net.tls.allowInvalidHostnames"].as<moe::OptionTypeMap<moe::Switch>::type>();
    }

    if (params.count("net.tls.allowInvalidCertificates")) {
        sslGlobalParams.sslAllowInvalidCertificates = params["net.tls.allowInvalidCertificates"].as<moe::OptionTypeMap<moe::Switch>::type>();
    }

    if (params.count("net.tls.FIPSMode")) {
        sslGlobalParams.sslFIPSMode = params["net.tls.FIPSMode"].as<moe::OptionTypeMap<moe::Switch>::type>();
    }

    return Status::OK();
}
}  // namespace 

}  // namespace mongo
