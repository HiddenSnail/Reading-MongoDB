/**
 * WARNING: This is a generated file. Do not modify.
 *
 * Source: buildscripts/idl/idlc.py --include src --base_dir build/opt --target_arch x86_64 --header build/opt/mongo/util/net/ssl_options_client_gen.h --output build/opt/mongo/util/net/ssl_options_client_gen.cpp src/mongo/util/net/ssl_options_client.idl
 */

#include "mongo/platform/basic.h"

#include "mongo/util/net/ssl_options_client_gen.h"

#include <bitset>
#include <set>

#include "mongo/bson/bsonobjbuilder.h"
#include "mongo/db/command_generic_argument.h"
#include "mongo/db/commands.h"
#include "mongo/util/options_parser/option_section.h"
#include "mongo/util/options_parser/startup_option_init.h"
#include "mongo/util/options_parser/startup_options.h"

namespace mongo {


namespace  {
MONGO_MODULE_STARTUP_OPTIONS_REGISTER(idl_a044e7c72974fb0cd563c47a6409e609e1ecf13c)(InitializerContext*) {
    auto& options = optionenvironment::startupOptions;
    namespace moe = ::mongo::optionenvironment;

    {
        moe::OptionSection section("TLS Options");

        section
            .addOptionChaining("tls", "tls", moe::Switch, "use TLS for all connections", {"ssl"}, {"ssl"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
        ;

        section
            .addOptionChaining("tls.certificateKeyFile", "tlsCertificateKeyFile", moe::String, "PEM certificate/key file for TLS", {"ssl.PEMKeyFile"}, {"sslPEMKeyFile"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .requiresOption("tls")
        ;

        section
            .addOptionChaining("tls.tlsCertificateKeyFilePassword", "tlsCertificateKeyFilePassword", moe::String, "Password for key in PEM file for TLS", {"ssl.PEMKeyPassword"}, {"sslPEMKeyPassword"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .redact()
            .requiresOption("tls")
        ;

        section
            .addOptionChaining("tls.CAFile", "tlsCAFile", moe::String, "Certificate Authority file for TLS", {"ssl.CAFile"}, {"sslCAFile"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .requiresOption("tls")
        ;

        section
            .addOptionChaining("tls.CRLFile", "tlsCRLFile", moe::String, "Certificate Revocation List file for TLS", {"ssl.CRLFile"}, {"sslCRLFile"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .requiresOption("tls")
            .requiresOption("tls.CAFile")
        ;

        section
            .addOptionChaining("tls.allowInvalidHostnames", "tlsAllowInvalidHostnames", moe::Switch, "Allow connections to servers with non-matching hostnames", {"ssl.allowInvalidHostnames"}, {"sslAllowInvalidHostnames"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .requiresOption("tls")
        ;

        section
            .addOptionChaining("tls.allowInvalidCertificates", "tlsAllowInvalidCertificates", moe::Switch, "Allow connections to servers with invalid certificates", {"sslAllowInvalidCertificates"}, {"sslAllowInvalidCertificates"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .requiresOption("tls")
        ;

        section
            .addOptionChaining("tls.FIPSMode", "tlsFIPSMode", moe::Switch, "Activate FIPS 140-2 mode at startup", {"ssl.FIPSMode"}, {"sslFIPSMode"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .requiresOption("tls")
        ;

#if defined(MONGO_CONFIG_SSL_CERTIFICATE_SELECTORS)
        section
            .addOptionChaining("tls.certificateSelector", "tlsCertificateSelector", moe::String, "TLS Certificate in system store", {"ssl.certificateSelector"}, {"sslCertificateSelector"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .requiresOption("tls")
        ;
#endif

        section
            .addOptionChaining("tls.disabledProtocols", "tlsDisabledProtocols", moe::String, "Comma separated list of TLS protocols to disable [TLS1_0,TLS1_1,TLS1_2]", {"ssl.disabledProtocols"}, {"sslDisabledProtocols"}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceAll)
            .requiresOption("tls")
        ;

        auto status = options.addSection(section);
        if (!status.isOK()) {
            return status;
        }
    }

    return Status::OK();
}
}  // namespace 

namespace  {
MONGO_STARTUP_OPTIONS_STORE(idl_a044e7c72974fb0cd563c47a6409e609e1ecf13c)(InitializerContext*) {
    MONGO_COMPILER_VARIABLE_UNUSED const auto& params = optionenvironment::startupOptionsParsed;
    namespace moe = ::mongo::optionenvironment;

    if (params.count("tls.certificateKeyFile")) {
        sslGlobalParams.sslPEMKeyFile = params["tls.certificateKeyFile"].as<moe::OptionTypeMap<moe::String>::type>();
    }

    if (params.count("tls.tlsCertificateKeyFilePassword")) {
        sslGlobalParams.sslPEMKeyPassword = params["tls.tlsCertificateKeyFilePassword"].as<moe::OptionTypeMap<moe::String>::type>();
    }

    if (params.count("tls.CAFile")) {
        sslGlobalParams.sslCAFile = params["tls.CAFile"].as<moe::OptionTypeMap<moe::String>::type>();
    }

    if (params.count("tls.CRLFile")) {
        sslGlobalParams.sslCRLFile = params["tls.CRLFile"].as<moe::OptionTypeMap<moe::String>::type>();
    }

    if (params.count("tls.allowInvalidHostnames")) {
        sslGlobalParams.sslAllowInvalidHostnames = params["tls.allowInvalidHostnames"].as<moe::OptionTypeMap<moe::Switch>::type>();
    }

    if (params.count("tls.allowInvalidCertificates")) {
        sslGlobalParams.sslAllowInvalidCertificates = params["tls.allowInvalidCertificates"].as<moe::OptionTypeMap<moe::Switch>::type>();
    }

    if (params.count("tls.FIPSMode")) {
        sslGlobalParams.sslFIPSMode = params["tls.FIPSMode"].as<moe::OptionTypeMap<moe::Switch>::type>();
    }

    return Status::OK();
}
}  // namespace 

}  // namespace mongo
