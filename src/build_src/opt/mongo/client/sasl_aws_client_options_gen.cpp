/**
 * WARNING: This is a generated file. Do not modify.
 *
 * Source: buildscripts/idl/idlc.py --include src --base_dir build/opt --target_arch x86_64 --header build/opt/mongo/client/sasl_aws_client_options_gen.h --output build/opt/mongo/client/sasl_aws_client_options_gen.cpp src/mongo/client/sasl_aws_client_options.idl
 */

#include "mongo/platform/basic.h"

#include "mongo/client/sasl_aws_client_options_gen.h"

#include <bitset>
#include <set>

#include "mongo/bson/bsonobjbuilder.h"
#include "mongo/db/command_generic_argument.h"
#include "mongo/db/commands.h"
#include "mongo/idl/server_parameter.h"
#include "mongo/idl/server_parameter_with_storage.h"
#include "mongo/util/options_parser/option_section.h"
#include "mongo/util/options_parser/startup_option_init.h"
#include "mongo/util/options_parser/startup_options.h"

namespace mongo {
namespace awsIam {

MONGO_SERVER_PARAMETER_REGISTER(idl_10056d452b2a27b6d8e22d8e56e819ba12a42528)(InitializerContext*) {
    /**
     * Test parameter to override the URL for AWS EC2 Instance Metadata
     */
    MONGO_COMPILER_VARIABLE_UNUSED auto* scp_0 = ([]() -> ServerParameter* {
        auto* ret = makeIDLServerParameterWithStorage<ServerParameterType::kStartupOnly>("awsEC2InstanceMetadataUrl", saslAwsClientGlobalParams.awsEC2InstanceMetadataUrl);
        uassertStatusOK(ret->setValue("http://169.254.169.254"));
        return ret;
    })();

    /**
     * Test parameter to override the URL for AWS ECS Instance Metadata
     */
    MONGO_COMPILER_VARIABLE_UNUSED auto* scp_1 = ([]() -> ServerParameter* {
        auto* ret = makeIDLServerParameterWithStorage<ServerParameterType::kStartupOnly>("awsECSInstanceMetadataUrl", saslAwsClientGlobalParams.awsECSInstanceMetadataUrl);
        uassertStatusOK(ret->setValue("http://169.254.170.2"));
        return ret;
    })();

    return Status::OK();
}

namespace  {
MONGO_MODULE_STARTUP_OPTIONS_REGISTER(idl_10056d452b2a27b6d8e22d8e56e819ba12a42528)(InitializerContext*) {
    auto& options = optionenvironment::startupOptions;
    namespace moe = ::mongo::optionenvironment;

    {
        moe::OptionSection section("AWS IAM Options");

        section
            .addOptionChaining("awsIamSessionToken", "awsIamSessionToken", moe::String, "AWS Session Token for temporary credentials", {}, {}, moe::OptionSection::OptionParserUsageType::IDLAutoGeneratedCode)
            .setSources(moe::SourceCommandLine)
        ;

        auto status = options.addSection(section);
        if (!status.isOK()) {
            return status;
        }
    }

    return Status::OK();
}
}  // namespace 

namespace  {
MONGO_STARTUP_OPTIONS_STORE(idl_10056d452b2a27b6d8e22d8e56e819ba12a42528)(InitializerContext*) {
    MONGO_COMPILER_VARIABLE_UNUSED const auto& params = optionenvironment::startupOptionsParsed;
    namespace moe = ::mongo::optionenvironment;

    if (params.count("awsIamSessionToken")) {
        saslAwsClientGlobalParams.awsSessionToken = params["awsIamSessionToken"].as<moe::OptionTypeMap<moe::String>::type>();
    }

    return Status::OK();
}
}  // namespace 

}  // namespace awsIam
}  // namespace mongo
